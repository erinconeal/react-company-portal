{"mappings":"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","sources":["src/Clients.tsx","src/ClientForm.tsx","src/ClientCard.tsx","src/ClientSkeleton.tsx"],"sourcesContent":["import { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\nimport ClientForm from \"./ClientForm\";\nimport ClientCard from \"./ClientCard\";\nimport ClientSkeleton from \"./ClientSkeleton\";\nimport { ClientsAPIResponse } from \"./APIResponsesTypes\";\n\nconst localCache: {\n  clients: ClientsAPIResponse[];\n} = { clients: [] };\n\ntype State = {\n  clients: ClientsAPIResponse[];\n  showAddForm: boolean;\n  status: string;\n  updating: {\n    [key: number]: boolean;\n  };\n};\n\nclass Clients extends Component<RouteComponentProps> {\n  state = {\n    clients: [] as ClientsAPIResponse[],\n    showAddForm: false,\n    status: \"unloaded\",\n    updating: {},\n  };\n\n  async componentDidMount() {\n    if (localCache.clients.length) {\n      this.setState(\n        Object.assign({ clients: localCache.clients, status: \"loaded\" })\n      );\n      return;\n    }\n\n    try {\n      this.setState(\n        Object.assign({ clients: Array(10).fill(undefined), status: \"loading\" })\n      );\n      // from https://jsonplaceholder.typicode.com/\n      const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n      const json = (await res.json()) as ClientsAPIResponse;\n      this.setState(Object.assign({ clients: json, status: \"loaded\" }));\n      localCache.clients = this.state.clients;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  handleAddButtonClick = () => {\n    this.setState(Object.assign({ showAddForm: !this.state.showAddForm }));\n  };\n\n  addClient = async (form: ClientsAPIResponse) => {\n    try {\n      const res = await fetch(\"https://jsonplaceholder.typicode.com/users\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          ...form,\n        }),\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\",\n        },\n      });\n      const json = (await res.json()) as ClientsAPIResponse;\n      this.setState({\n        clients: [...this.state.clients, json],\n        showAddForm: false,\n      });\n      localCache.clients = this.state.clients;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  cancelAddClient = () => {\n    this.setState({ showAddForm: false });\n  };\n\n  deleteClient = async (clientId: number) => {\n    try {\n      await fetch(`https://jsonplaceholder.typicode.com/users/${clientId}`, {\n        method: \"DELETE\",\n      });\n      const remainingClients = this.state.clients.filter(\n        (client) => client.id !== clientId\n      );\n      this.setState({ clients: remainingClients });\n      localCache.clients = this.state.clients;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  toggleUpdateClient = (index: number) => {\n    this.setState((prevState: State) => {\n      const updating = { ...prevState.updating };\n      updating[index] = !updating[index];\n      return { updating };\n    });\n  };\n\n  updateClient = async (\n    form: ClientsAPIResponse,\n    clientId: number,\n    index: number\n  ) => {\n    try {\n      const res = await fetch(\n        `https://jsonplaceholder.typicode.com/users/${clientId}`,\n        {\n          method: \"PUT\",\n          body: JSON.stringify({\n            // id: clientId,\n            ...form,\n          }),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n          },\n        }\n      );\n      const json = (await res.json()) as ClientsAPIResponse;\n      const updatedClientIndex = this.state.clients.findIndex(\n        (client) => client.id === clientId\n      );\n      this.state.clients.splice(updatedClientIndex, 1);\n      this.setState({\n        clients: [...this.state.clients, json],\n        showAddForm: false,\n      });\n      localCache.clients = this.state.clients;\n      this.toggleUpdateClient(index);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"flex-col sm:flex sm:flex-row sm:items-baseline sm:justify-between\">\n          <h1>Clients</h1>\n          <button\n            type=\"button\"\n            className=\"ml-4 sm:ml-0 btn btn-primary\"\n            onClick={this.handleAddButtonClick}\n          >\n            {this.state.showAddForm ? \"Close\" : \"Add\"}\n          </button>\n        </div>\n        {this.state.showAddForm ? (\n          <ClientForm\n            onAddClient={() => this.addClient}\n            title=\"Add new client\"\n            submitButtonText=\"Add client\"\n            submitAction=\"addClient\"\n            onCancelAddClient={this.cancelAddClient}\n          />\n        ) : null}\n        <ul className=\"clients\">\n          {this.state.clients.map(\n            (client: ClientsAPIResponse, index: number) => {\n              const isUpdating = this.state.updating[index] as State;\n              return {\n                loading: (\n                  <li key={index}>\n                    <ClientSkeleton />\n                  </li>\n                ),\n                loaded: isUpdating ? (\n                  <li key={index}>\n                    <ClientForm\n                      client={client}\n                      onUpdateClient={(\n                        formInputs: ClientsAPIResponse,\n                        clientId: number\n                      ) => this.updateClient(formInputs, clientId, index)}\n                      title=\"Update\"\n                      submitButtonText=\"Update\"\n                      submitAction=\"updateClient\"\n                      onCancelUpdateClient={() =>\n                        this.toggleUpdateClient(index)\n                      }\n                    />\n                  </li>\n                ) : (\n                  <li key={index}>\n                    <ClientCard\n                      client={client}\n                      onDeleteClient={() => this.deleteClient}\n                      onUpdateClient={() => this.toggleUpdateClient(index)}\n                    />\n                  </li>\n                ),\n              }[this.state.status];\n            }\n          )}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Clients);\n","import { ChangeEvent, Component, ReactNode } from \"react\";\nimport { ClientsAPIResponse } from \"./APIResponsesTypes\";\n\ntype FormProps = {\n  title: string;\n  submitButtonText: string;\n};\n\ntype ConditionalProps =\n  | {\n      submitAction: \"updateClient\";\n      onCancelUpdateClient: () => void;\n      onUpdateClient: (\n        formInputs: ClientsAPIResponse,\n        clientId: number\n      ) => void;\n      client: ClientsAPIResponse;\n    }\n  | {\n      submitAction: \"addClient\";\n      onCancelAddClient: () => void;\n      onAddClient: (formInputs: ClientsAPIResponse) => void;\n      client?: undefined;\n    };\n\ntype Props = FormProps & ConditionalProps;\n\nclass ClientForm extends Component<Props> {\n  state = {\n    formInputs: {\n      address: {\n        suite: \"\",\n        city: \"\",\n        street: \"\",\n        zipcode: \"\",\n      },\n      company: { name: \"\" },\n      website: \"\",\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      id: 0,\n    },\n  };\n\n  componentDidMount(): void {\n    if (this.props.client) {\n      this.setState(Object.assign({ formInputs: this.props.client }));\n    }\n  }\n\n  handleInputChange = (\n    event: ChangeEvent,\n    optionalObjTitle: \"company\" | \"address\"\n  ): void => {\n    const target = event.target as HTMLInputElement;\n    const inputValue =\n      target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    const stateCopy = Object.assign({}, this.state);\n    optionalObjTitle\n      ? (stateCopy.formInputs[optionalObjTitle][name] = inputValue)\n      : (stateCopy.formInputs[name] = inputValue);\n\n    this.setState(stateCopy);\n  };\n\n  handleCancelButtonClick = (): void => {\n    switch (this.props.submitAction) {\n      case \"addClient\":\n        return this.props.onCancelAddClient();\n      case \"updateClient\":\n        return this.props.onCancelUpdateClient();\n      default:\n        throw new Error();\n    }\n  };\n\n  handleSubmitClient(): void {\n    switch (this.props.submitAction) {\n      case \"addClient\":\n        return this.props.onAddClient(this.state.formInputs);\n      case \"updateClient\":\n        return this.props.onUpdateClient(\n          this.state.formInputs,\n          this.props.client.id\n        );\n      default:\n        throw new Error();\n    }\n  }\n\n  render(): ReactNode {\n    const {\n      website,\n      name,\n      email,\n      phone,\n      address: { suite, street, city, zipcode },\n    } = this.state.formInputs;\n\n    return (\n      <div className=\"border-card\">\n        <h2>{this.props.title}</h2>\n        <form\n          id=\"clientForm\"\n          onSubmit={(e) => {\n            e.preventDefault();\n            this.handleSubmitClient();\n          }}\n        >\n          <div className=\"form-input\">\n            <label htmlFor=\"companyName\">Company Name (required)</label>\n            <input\n              type=\"text\"\n              id=\"companyName\"\n              name=\"name\"\n              value={this.state.formInputs.company.name}\n              required\n              aria-required=\"true\"\n              onChange={(e) => this.handleInputChange(e, \"company\")}\n            />\n          </div>\n          <div className=\"form-input\">\n            <label htmlFor=\"website\">Website</label>\n            <input\n              type=\"text\"\n              id=\"website\"\n              name=\"website\"\n              value={website}\n              onChange={() => this.handleInputChange}\n            />\n          </div>\n          <div>\n            <h3>Client Address</h3>\n            <div className=\"grid sm:grid-cols-2 gap-4\">\n              <div className=\"form-input\">\n                <label htmlFor=\"suite\">Suite/Apt</label>\n                <input\n                  type=\"text\"\n                  id=\"suite\"\n                  name=\"suite\"\n                  value={suite}\n                  onChange={(e) => this.handleInputChange(e, \"address\")}\n                />\n              </div>\n              <div className=\"form-input\">\n                <label htmlFor=\"street\">Street (required)</label>\n                <input\n                  type=\"text\"\n                  id=\"street\"\n                  name=\"street\"\n                  required\n                  aria-required=\"true\"\n                  value={street}\n                  onChange={(e) => this.handleInputChange(e, \"address\")}\n                />\n              </div>\n              <div className=\"form-input\">\n                <label htmlFor=\"city\">City (required)</label>\n                <input\n                  type=\"text\"\n                  id=\"city\"\n                  name=\"city\"\n                  required\n                  aria-required=\"true\"\n                  value={city}\n                  onChange={(e) => this.handleInputChange(e, \"address\")}\n                />\n              </div>\n              <div className=\"form-input\">\n                <label htmlFor=\"zipcode\">Zip code (required)</label>\n                <input\n                  type=\"text\"\n                  id=\"zipcode\"\n                  name=\"zipcode\"\n                  required\n                  aria-required=\"true\"\n                  value={zipcode}\n                  onChange={(e) => this.handleInputChange(e, \"address\")}\n                />\n              </div>\n            </div>\n          </div>\n          <div>\n            <h3>Client Contact</h3>\n            <div className=\"form-input\">\n              <label htmlFor=\"fullName\">Full name (required)</label>\n              <input\n                type=\"text\"\n                id=\"fullName\"\n                name=\"name\"\n                required\n                aria-required=\"true\"\n                value={name}\n                onChange={() => this.handleInputChange}\n              />\n            </div>\n            <div className=\"grid sm:grid-cols-2 gap-4\">\n              <div className=\"form-input\">\n                <label htmlFor=\"email\">Email</label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  name=\"email\"\n                  value={email}\n                  onChange={() => this.handleInputChange}\n                />\n              </div>\n              <div className=\"form-input\">\n                <label htmlFor=\"phone\">Phone number</label>\n                <input\n                  type=\"tel\"\n                  id=\"phone\"\n                  name=\"phone\"\n                  value={phone}\n                  onChange={() => this.handleInputChange}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"flex space-x-5 mt-5\">\n            <button className=\"btn btn-primary\">\n              {this.props.submitButtonText}\n            </button>\n            <button\n              className=\"btn btn-secondary\"\n              type=\"button\"\n              onClick={this.handleCancelButtonClick}\n            >\n              Cancel\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default ClientForm;\n","import { Component, ReactNode } from \"react\";\nimport { ClientsAPIResponse } from \"./APIResponsesTypes\";\n\ntype CardProps = {\n  client: ClientsAPIResponse;\n  onDeleteClient: (clientId: number) => void;\n  onUpdateClient: () => void;\n};\n\nclass ClientCard extends Component<CardProps> {\n  handleDeleteClient(clientId: number): void {\n    return this.props.onDeleteClient(clientId);\n  }\n  handleUpdateClient(): void {\n    return this.props.onUpdateClient();\n  }\n\n  render(): ReactNode {\n    const { client } = this.props;\n    return (\n      <div className=\"border-card\">\n        <h2>{client.company.name}</h2>\n        {client.website ? <a href={client.website}>{client.website}</a> : null}\n        <div className=\"grid sm:grid-cols-2 gap-4 mt-7 clients\">\n          <div>\n            <p>{client?.address?.suite}</p>\n            <p>{client?.address?.street}</p>\n            <p>{client?.address?.city}</p>\n            <p>{client?.address?.zipcode}</p>\n          </div>\n          <div>\n            <p>Contact:</p>\n            <p>{client.name}</p>\n            <p>\n              <a href={client.email}>{client.email}</a>\n            </p>\n            <a href={client.phone}>{client.phone}</a>\n          </div>\n        </div>\n        <div className=\"flex space-x-5 mt-5\">\n          <button\n            className=\"btn btn-secondary\"\n            onClick={() => this.handleUpdateClient()}\n          >\n            Update\n          </button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => this.handleDeleteClient(client.id)}\n          >\n            Delete\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ClientCard;\n","import { Component, ReactNode } from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\n\nclass ClientSkeleton extends Component {\n  render(): ReactNode {\n    return (\n      <div className=\"border-card\">\n        <h2>\n          <Skeleton />\n        </h2>\n        <Skeleton />\n        <div className=\"grid sm:grid-cols-2 gap-4 mt-7 clients\">\n          <Skeleton count={4} />\n          <div>\n            <p>Contact:</p>\n            <Skeleton count={3} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ClientSkeleton;\n"],"names":["$1edb04ac86b841f7$var$_ClientForm","$1edb04ac86b841f7$var$_interopRequireDefault","parcelRequire","$1edb04ac86b841f7$var$_ClientCard","$1edb04ac86b841f7$var$_ClientSkeleton","localCache","clients","Clients","Component","args","super","$1edb04ac86b841f7$var$_defineProperty","this","showAddForm","status","updating","setState","Object","assign","state","async","form","res","fetch","method","body","JSON","stringify","headers","json","error","console","log","clientId","remainingClients","filter","client","id","index","prevState","updatedClientIndex","findIndex","splice","toggleUpdateClient","length","Array","fill","undefined","render","$bIkCC","jsxs","children","className","jsx","type","onClick","handleAddButtonClick","default","onAddClient","addClient","title","submitButtonText","submitAction","onCancelAddClient","cancelAddClient","map","isUpdating","loading","loaded","onUpdateClient","formInputs","updateClient","onCancelUpdateClient","onDeleteClient","deleteClient","$1edb04ac86b841f7$var$_default","$enQ9P","withRouter","ClientForm","$a88bb0cf11ed96bf$var$_defineProperty","address","suite","city","street","zipcode","company","name","website","email","phone","event","optionalObjTitle","target","inputValue","checked","value","stateCopy","props","Error","componentDidMount","handleSubmitClient","onSubmit","e","preventDefault","htmlFor","required","onChange","handleInputChange","handleCancelButtonClick","ClientCard","handleDeleteClient","handleUpdateClient","_client$address","_client$address2","_client$address3","_client$address4","href","$83edf41dcb1375b8$var$_reactLoadingSkeleton","ClientSkeleton","count"],"version":3,"file":"Clients.972845ad.js.map"}