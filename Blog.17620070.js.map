{"mappings":"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","sources":["src/Blog.tsx","src/useInfiniteScroll.tsx","src/useLazyLoading.tsx"],"sourcesContent":["import {\n  useEffect,\n  useState,\n  FunctionComponent,\n  useReducer,\n  useRef,\n} from \"react\";\nimport { PostsAPIResponse, PicsumPhotosAPIResponse } from \"./APIResponsesTypes\";\nimport Skeleton from \"react-loading-skeleton\";\nimport useInfiniteScroll from \"./useInfiniteScroll\";\nimport useLazyLoading from \"./useLazyLoading\";\n\nexport interface CombinedData {\n  id: string;\n  title: string;\n  body: string;\n  download_url: string;\n}\n\ntype pageState = {\n  page: number;\n};\n\ntype pageAction = { type: \"ADVANCE_PAGE\" };\n\nconst Blog: FunctionComponent = () => {\n  const [data, setData] = useState<CombinedData[]>([]);\n  const [isFetchingData, setIsFetchingData] = useState(false);\n  const [images, setImages] = useState<PicsumPhotosAPIResponse[]>([]);\n  const [posts, setPosts] = useState<PostsAPIResponse[]>([]);\n  const bottomBoundaryRef = useRef(null);\n\n  const pageReducer = (state: pageState, action: pageAction) => {\n    switch (action.type) {\n      case \"ADVANCE_PAGE\":\n        return { ...state, page: state.page + 1 };\n      default:\n        return state;\n    }\n  };\n  const [pager, pagerDispatch] = useReducer(pageReducer, { page: 1 });\n\n  useEffect(() => {\n    void requestData(pager.page);\n  }, [pager.page]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useLazyLoading(\".card-top\", data);\n  useInfiniteScroll(bottomBoundaryRef, pagerDispatch);\n\n  useEffect(() => {\n    const combinedData: CombinedData[] = [];\n\n    posts.forEach((item: PostsAPIResponse, i: number) => {\n      combinedData.push(Object.assign({}, item, images[i]));\n    });\n    setData(combinedData);\n  }, [images, posts]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  async function requestPosts(page: number) {\n    try {\n      // from https://jsonplaceholder.typicode.com/\n      const res = await fetch(\n        `https://jsonplaceholder.typicode.com/posts?_page=${page}&_limit=10`\n      );\n      const json = (await res.json()) as PostsAPIResponse[];\n      setPosts((posts) => posts.concat(json));\n      return posts || [];\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function requestImages(page: number) {\n    try {\n      // from https://picsum.photos/\n      const res = await fetch(\n        `https://picsum.photos/v2/list?page=${page}&limit=10`\n      );\n      const json = (await res.json()) as PicsumPhotosAPIResponse[];\n      setImages((images) => images.concat(json));\n      return images || [];\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function requestData(page: number) {\n    try {\n      setIsFetchingData(true);\n      await Promise.all([requestPosts(page), requestImages(page)]);\n      setIsFetchingData(false);\n    } catch (error) {\n      console.log(error);\n      setIsFetchingData(false);\n    }\n  }\n\n  return (\n    <div>\n      <h1>Blog</h1>\n      <div>\n        <ul className=\"grid grid-flow-cols sm:grid-cols-2 blogs\">\n          {data.map((d, index) => {\n            return (\n              <li key={index} className=\"pr-5 card-top\">\n                {d?.download_url ? (\n                  <img\n                    alt=\"\"\n                    src={\n                      \"https://picsum.photos/id/870/300/300?grayscale&blur=2\"\n                    }\n                    data-src={d.download_url}\n                  />\n                ) : (\n                  <Skeleton height={300} width={300} />\n                )}\n                <h2>{d?.title || <Skeleton />}</h2>\n                <p>{d?.body || <Skeleton count={3} />}</p>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n      {isFetchingData && (\n        <div className=\"text-center bg-secondary m-auto p-3\">\n          <p className=\"m-0 text-black\">Getting data</p>\n        </div>\n      )}\n      <div id=\"page-bottom-boundary\" ref={bottomBoundaryRef}></div>\n    </div>\n  );\n};\n\nexport default Blog;\n","import { useEffect, useCallback, MutableRefObject, Dispatch } from \"react\";\n\n// infinite scrolling with intersection observer\nconst useInfiniteScroll = (\n  scrollRef: MutableRefObject<HTMLDivElement | null>,\n  dispatch: Dispatch<{ type: \"ADVANCE_PAGE\" }>\n): void => {\n  const scrollObserver = useCallback(\n    (node) => {\n      new IntersectionObserver((entries) => {\n        entries.forEach((en) => {\n          if (en.intersectionRatio > 0) {\n            dispatch({ type: \"ADVANCE_PAGE\" });\n          }\n        });\n      }).observe(node);\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollObserver(scrollRef.current);\n    }\n  }, [scrollObserver, scrollRef]);\n};\n\nexport default useInfiniteScroll;\n","import { useEffect, useCallback, useRef, MutableRefObject } from \"react\";\nimport { CombinedData } from \"./Blog\";\n\n// lazy load images with intersection observer\nconst useLazyLoading = (\n  elementSelector: string,\n  items: CombinedData[]\n): void => {\n  const observer = useCallback((node) => {\n    const intObs = new IntersectionObserver((entries) => {\n      entries.forEach((en) => {\n        if (en.intersectionRatio > 0) {\n          const currentListItem = en.target as HTMLLIElement;\n          const firstChild = currentListItem.children[0] as HTMLImageElement;\n          if (firstChild.tagName === \"IMG\") {\n            const newImgSrc = firstChild.dataset.src;\n\n            // only swap out the image source if the new url exists\n            if (!newImgSrc) {\n              console.error(\"Image source is invalid\");\n            } else {\n              firstChild.src = newImgSrc;\n            }\n          }\n          intObs.unobserve(node);\n        }\n      });\n    });\n    intObs.observe(node);\n  }, []);\n\n  const listRef: MutableRefObject<HTMLLIElement[] | null> = useRef(null);\n\n  useEffect(() => {\n    listRef.current = Array.from(document.querySelectorAll(elementSelector));\n\n    if (listRef.current) {\n      listRef.current.forEach((listItem: HTMLLIElement) => observer(listItem));\n    }\n  }, [observer, listRef, elementSelector, items]);\n};\n\nexport default useLazyLoading;\n"],"names":["$d2bc6bae49aeab9b$var$_reactLoadingSkeleton","$d2bc6bae49aeab9b$var$_interopRequireDefault","parcelRequire","$d2bc6bae49aeab9b$var$_useInfiniteScroll","$d2bc6bae49aeab9b$var$_useLazyLoading","Blog","data","setData","$gctDA","useState","isFetchingData","setIsFetchingData","images","setImages","posts","setPosts","bottomBoundaryRef","useRef","pager","pagerDispatch","useReducer","state","action","type","page","requestPosts","res","fetch","json","concat","error","console","log","requestImages","useEffect","Promise","all","requestData","default","combinedData","forEach","item","i","push","Object","assign","$bIkCC","jsxs","children","jsx","className","map","d","index","download_url","alt","src","height","width","title","body","count","id","ref","useInfiniteScroll","scrollRef","dispatch","scrollObserver","useCallback","node","IntersectionObserver","entries","en","intersectionRatio","observe","current","useLazyLoading","elementSelector","items","observer","intObs","firstChild","target","tagName","newImgSrc","dataset","unobserve","listRef","Array","from","document","querySelectorAll","listItem"],"version":3,"file":"Blog.17620070.js.map"}